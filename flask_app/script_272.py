# -*- coding: utf-8 -*-
"""CMPE256_Hackathon (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dCLw2tUZiSLhYQnENajnHA6lvcV0Hw-5

# Hackathon

### Setup
"""

# !pip install wheel setuptools pip --upgrade
# !pip3 install wheel setuptools pip --upgrade

# üëáÔ∏è if you don't have pip in your PATH environment variable
# !pip install wheel setuptools pip --upgrad
# !pip install wheel setuptools pip --upgrade
# !pip install wheel setuptools pip --upgrade

# !pip install openai
# !pip install chromadb
# !pip install PyPDF2
# !pip install langchain
# !pip install dotenv

# !pip3 install openai
# !pip3 install llama-index
# !pip3 install pypdf
# !pip3 install gradio

# !pip install langchain openai pypdf faiss-cpu

OPENAI_API_KEY = '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'

# from google.colab import drive
# drive.mount('/content/drive')

from langchain.document_loaders import PyPDFLoader
from langchain.vectorstores import FAISS
from langchain.chat_models import ChatOpenAI
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA, ConversationalRetrievalChain
import os

"""### Code"""

import os

def list_filenames(directory):
    try:
        # List all files and directories in the given directory
        filenames = os.listdir(directory)

        # Filter out directories if you want only files
        filenames = [file for file in filenames if os.path.isfile(os.path.join(directory, file))]

        return filenames
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

# Example usage
directory_path = "Data/PDF"
file_list = list_filenames(directory_path)
print(file_list)

import PyPDF2

# Open the PDF file
def extract_text(file_path):
  pdf_file_path = file_path
  pdf_file = open(pdf_file_path, 'rb')
  # Create a PDF object
  pdf_reader = PyPDF2.PdfReader(pdf_file)
  # Loop through all the pages and extract text
  pdf_text = ''
  for page_num in range(len(pdf_reader.pages)-10):
    # print(page_num)
    page = pdf_reader.pages[page_num]
    pdf_text += page.extract_text()

  # Close the PDF file
  pdf_file.close()
  return pdf_text

all_text = ''
full_directory_prefix = directory_path + '/'
for each_file_name in file_list:
  all_text = all_text + extract_text(full_directory_prefix + each_file_name)

def extract_text_from_all_PDF_files():
  all_text = ''
  full_directory_prefix = directory_path + '/'
  for each_file_name in file_list:
    all_text = all_text + extract_text(full_directory_prefix + each_file_name)
  return all_text

# print(all_text)

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
texts = text_splitter.create_documents([all_text])

os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
directory = 'index_store'
# vector_index = FAISS.from_documents(texts, OpenAIEmbeddings())
# vector_index.save_local(directory)

vector_index = FAISS.load_local('index_store', OpenAIEmbeddings())
retriever = vector_index.as_retriever(search_type="similarity", search_kwargs={"k":6})
qa_interface = RetrievalQA.from_chain_type(llm=ChatOpenAI(), chain_type="stuff", retriever=retriever, return_source_documents=False)


def get_response(question):
   response_object = qa_interface(question)
   question = response_object['query']
   response = response_object['result']

   return response
# query = ""
# response = qa_interface(query)
# print(response)

"""### Scratch

# Scratch Stuff

## Prompts
"""

